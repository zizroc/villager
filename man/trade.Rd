% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BaseVillage.R
\docType{class}
\name{trade}
\alias{trade}
\alias{BaseVillage}
\title{Village State}
\description{
This is an object that represents the state of a village at a particular time.
}
\details{
This class acts as a type of record that holds the values of the different village variables. This class can be subclassed
to include more variables that aren't present.
}
\section{Methods}{

\describe{
\item{\code{propagate()}}{Advances the village a single time step}
\item{\code{add_trade_partner(newTradePartner, addBack)}}{Adds a trde partner}.
\item{\code{trade()}}{Executes a trade at a time step}.
\item{\code{as_tibble()}}{Adds a trde partner}.
\item{\code{plot()}}{Plots the time dependant variables}.
}
Initializes a village
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{An optional name for the village}

\item{\code{initialState}}{The initial state that the village has}

\item{\code{StateRecords}}{A list of state objects, one for each time step}

\item{\code{tradePartners}}{A list of villages that this village can trade with}

\item{\code{models}}{A list of functions or a single function that should be run at each timestep}

\item{\code{modelData}}{Optional data that models may need}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{BaseVillage$new()}}
\item \href{#method-propagate}{\code{BaseVillage$propagate()}}
\item \href{#method-add_trade_partner}{\code{BaseVillage$add_trade_partner()}}
\item \href{#method-trade}{\code{BaseVillage$trade()}}
\item \href{#method-as_tibble}{\code{BaseVillage$as_tibble()}}
\item \href{#method-plot}{\code{BaseVillage$plot()}}
\item \href{#method-clone}{\code{BaseVillage$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
This method is meant to set the variables that are needed for a village to propagate through
time.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseVillage$new(
  name = NA,
  initialState = NULL,
  models = list(),
  modelData = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{An optional name for the village}

\item{\code{initialState}}{A VillageSTate object that will be used as the village's initial state}

\item{\code{models}}{A list of functions or a single function that should be run at each timestep}

\item{\code{modelData}}{Optional data that models may need
Propagates the village a single time step}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Any villages that derive this class should call this method's initialize method.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-propagate"></a>}}
\if{latex}{\out{\hypertarget{method-propagate}{}}}
\subsection{Method \code{propagate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseVillage$propagate(year = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{year}}{The year that the village is computing the new state for}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
Connects two villages so that they can trade with each other.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_trade_partner"></a>}}
\if{latex}{\out{\hypertarget{method-add_trade_partner}{}}}
\subsection{Method \code{add_trade_partner()}}{
Connects two villages together for trade
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseVillage$add_trade_partner(newTradePartner, addBack = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{newTradePartner}}{A derived BaseVillage object representing a village that this village
can trade with}

\item{\code{addBack}}{An optional parameter that, when true will

Runs the village's trade algorithms}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method takes advantage of R6's reference semantics. Because classes that are derived
from BaseVillage are R6, they can be directly modified. This
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-trade"></a>}}
\if{latex}{\out{\hypertarget{method-trade}{}}}
\subsection{Method \code{trade()}}{
Executes a village's trade
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseVillage$trade()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_tibble"></a>}}
\if{latex}{\out{\hypertarget{method-as_tibble}{}}}
\subsection{Method \code{as_tibble()}}{
Gives a tibbble representation of the state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseVillage$as_tibble()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Returns a tibble composing of rows which are
properties from VillageState.
Plots a dependent variable against time
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\if{latex}{\out{\hypertarget{method-plot}{}}}
\subsection{Method \code{plot()}}{
This method can be used to quickly spot check various dependent
variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseVillage$plot(dependent_variable = "population")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dependent_variable}}{The variable name that should be plotted}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns a ggplot object representing the plot
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BaseVillage$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
